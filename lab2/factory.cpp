#include <iostream>
#include <string> 
#include <vector>
#include <cstdlib>

#include "string.h"
#include "factory.h"

using namespace std;


//фунция вывода на экран списка имен всех объектов-строк
void Factory::ListAllObjects()
{
int n=pObjects.size();// получаем число объектов в хранилище

cout << endl << "Список объектов: "<<endl<<"+++++++++++++++++++++++++++"<< endl;
for(int i=0;i<n;i++)
{
	cout << pObjects[i]->GetName()<< endl;;
}
cout << "+++++++++++++++++++++++++++" << endl;
}

//Функция вывода на консоль значения объекта из хранилища
void Factory::ShowObject(void )
{
  int item,n;
  
  n=pObjects.size();// получаем число объектов в хранилище
  
   if(n==0)	
  {
  	cout <<"!!!!! В хранилище нет объектов."<< endl;  	
  	return;
  	}
  
  cout <<"Выберите номер объекта для показа значения:"<< endl;
  
  for(int i=0;i<n;i++)
  {
  	cout << (i+1) <<":"<<pObjects[i]->GetName()<< endl;
  }
  
  item=SelectItem(n);// запрашиваем номер объекта для вывода наконсоль его значения
  
  cout << "Значение: ";
  // для показа значения иcпользуется виртуальная функция, переопределенная в каждом классе-потомке
  pObjects[item-1]->Show();
 
}

// удаление объекта из хранилища
void Factory::DeleteObject(void)
{
	int item,n;
  
  n=pObjects.size(); // число объектов в хранилище
  
  if(n==0)	
  {
  	cout <<"!!!!! В хранилище нет объектов."<< endl;
   	return;
   }
  
  cout<<"------------------------------------"<<endl;
  cout <<"Вы берите номер удаляемого объекта:"<<endl;
   for(int i=0;i<n;i++)
  {
  	cout << (i+1) <<":"<<pObjects[i]->GetName()<< endl;
  }
  
  
  
  	item=SelectItem(n);// запрашиваем номер объекта для его удаления из хранилища
  	item--;
  	
  	string name=pObjects[item]->GetName();// временно сохраняем имя объекта для отображения в сообщении об удалении
  	
	pObjects.erase(pObjects.begin() + item );//удаляем объект из хранилища
	
    cout <<"Объект < "<< name << " > удален  из хранилища. " << endl;
}

//фунция добавления нового обекта в хранилище
void Factory::AddObject(void )
{ 
 int item;
 StringObj *pNewObj; // указатель на объект базового абстрактного класса
 
		string name,value;
		
		cout << "Выберите тип добавляемого объекта:"<< endl;
		cout << "1.Символьная строка"<<endl;
		cout << "2.Восьмеричная строка"<<endl;
		item=SelectItem(2); // запрос выбора пункта меню
		
		// запрос имени объекта
		cout <<"Введите имя:";
		cin>> name;
		cin.get();
		
		cout <<"Введите значение:";
		
		char buffer[MAX_STRING_LEN];
		// запрос значения объекта
		cin.getline(buffer,MAX_STRING_LEN);
		value=buffer; 
		
		switch(item)
		{
			case 1: pNewObj = new SymbString(name,value); //создаем символьную строку
					break;
			case 2: // проверяем на корректность значение строки
					if( isOctString(value) == false)
					{cout <<endl<<"!!!!! Некорректное значение. Должны быть только цифры(0-7)."<< endl;
						return;
					}
					pNewObj= new OctString(name,value); //создаем десятичную строку
					break;
		}// end switch
		
		
		pObjects.push_back(pNewObj);// помещаем объект-строку в хранилище
		cout <<"Объект успешно добавлен в хранилище."<< endl;
}
	
void Factory::Operations()
{

  int item;
  char buffer[MAX_STRING_LEN];
  string value;
 
 cout << "Выберите тип складываемых объектов:" << endl;
 cout << "1.Символьная строка" << endl;
 cout << "2.Восьмеричная строка" << endl;

 item = SelectItem(2); // запрос выбора пункта меню

 switch (item)
 {
 case 1:
		{	cout << "Введите 1-е значение:";
			// запрос значения объекта
			cin.getline(buffer, MAX_STRING_LEN);
			value = buffer;
			SymbString s1("", value);

			cout << "Введите 2-е значение:";
			// запрос значения объекта
			cin.getline(buffer, MAX_STRING_LEN);
			value = buffer;
			SymbString s2("", value);
			SymbString s3 = s1 + s2;
			cout << "Результат сложения: "; s3.Show();
			}break;

 case 2: {	cout << "Введите 1-е значение(только цифры 0-7):";
	 // запрос значения объекта
	 cin.getline(buffer, MAX_STRING_LEN);
	 value = buffer;

	 if (isOctString(value) == false)
	 {  
		 cout << endl << "!!!!! Некорректное значение. Должны быть только цифры(0-7)." << endl;
		 return;
	 }
	 OctString os1("", value);

	 cout << "Введите 2-е значение (только цифры 0-7):";
	 // запрос значения объекта
	 cin.getline(buffer, MAX_STRING_LEN);
	 value = buffer;
	 if (isOctString(value) == false)
	 {
		 cout << endl << "!!!!! Некорректное значение. Должны быть только цифры(0-7)." << endl;
		 return;
	 }

	 OctString os2("", value);
	 SymbString os3 = os1 + os2;
	 cout << "Результат сложения: "; os3.Show();
 }break;


 }

}

//функция реализует ввод с консоли выбора пользователя
// от 1 до n
int Factory::SelectItem(int n)
{
	int item;
	while( true ) // бесконечный цикл пока не введут верное значение
	{
		cin >> item;
		if( (item > 0 && item <= n  ) && (cin.peek()=='\n')) 
		{ cin.get();
		  break; // выход из цикла
		}
		else
		{// ввели неверное значение
		cout <<"Ошибочный выбор. Повторите ввод.(от 1 до "<< n <<"):"<<endl;
		cin.clear();
		
		while( cin.get()!='\n'){	}; // ждем нажатия клавиши Enter
		
		}
	}
	return item;
}
